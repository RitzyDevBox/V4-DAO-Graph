// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AccountTransfer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AccountTransfer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AccountTransfer", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AccountTransfer | null {
    return changetype<AccountTransfer | null>(
      store.get_in_block("AccountTransfer", id.toHexString())
    );
  }

  static load(id: Bytes): AccountTransfer | null {
    return changetype<AccountTransfer | null>(
      store.get("AccountTransfer", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get accountId(): Bytes {
    let value = this.get("accountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set accountId(value: Bytes) {
    this.set("accountId", Value.fromBytes(value));
  }

  get toAccountId(): Bytes {
    let value = this.get("toAccountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set toAccountId(value: Bytes) {
    this.set("toAccountId", Value.fromBytes(value));
  }

  get assetKey_assetAddress(): Bytes {
    let value = this.get("assetKey_assetAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set assetKey_assetAddress(value: Bytes) {
    this.set("assetKey_assetAddress", Value.fromBytes(value));
  }

  get assetKey_id(): BigInt {
    let value = this.get("assetKey_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set assetKey_id(value: BigInt) {
    this.set("assetKey_id", Value.fromBigInt(value));
  }

  get assetKey_assetType(): i32 {
    let value = this.get("assetKey_assetType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set assetKey_assetType(value: i32) {
    this.set("assetKey_assetType", Value.fromI32(value));
  }

  get assetAmount(): BigInt {
    let value = this.get("assetAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set assetAmount(value: BigInt) {
    this.set("assetAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AddTimelock extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddTimelock entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AddTimelock must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AddTimelock", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AddTimelock | null {
    return changetype<AddTimelock | null>(
      store.get_in_block("AddTimelock", id.toHexString())
    );
  }

  static load(id: Bytes): AddTimelock | null {
    return changetype<AddTimelock | null>(
      store.get("AddTimelock", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _sender(): Bytes {
    let value = this.get("_sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _sender(value: Bytes) {
    this.set("_sender", Value.fromBytes(value));
  }

  get accountIdentityKey_organizationId(): BigInt {
    let value = this.get("accountIdentityKey_organizationId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accountIdentityKey_organizationId(value: BigInt) {
    this.set("accountIdentityKey_organizationId", Value.fromBigInt(value));
  }

  get accountIdentityKey_relatedId(): BigInt {
    let value = this.get("accountIdentityKey_relatedId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accountIdentityKey_relatedId(value: BigInt) {
    this.set("accountIdentityKey_relatedId", Value.fromBigInt(value));
  }

  get assetKey_assetAddress(): Bytes {
    let value = this.get("assetKey_assetAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set assetKey_assetAddress(value: Bytes) {
    this.set("assetKey_assetAddress", Value.fromBytes(value));
  }

  get assetKey_id(): BigInt {
    let value = this.get("assetKey_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set assetKey_id(value: BigInt) {
    this.set("assetKey_id", Value.fromBigInt(value));
  }

  get assetKey_assetType(): i32 {
    let value = this.get("assetKey_assetType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set assetKey_assetType(value: i32) {
    this.set("assetKey_assetType", Value.fromI32(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get releaseTime(): BigInt {
    let value = this.get("releaseTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set releaseTime(value: BigInt) {
    this.set("releaseTime", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AdminFeeOverride extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AdminFeeOverride entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AdminFeeOverride must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AdminFeeOverride", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AdminFeeOverride | null {
    return changetype<AdminFeeOverride | null>(
      store.get_in_block("AdminFeeOverride", id.toHexString())
    );
  }

  static load(id: Bytes): AdminFeeOverride | null {
    return changetype<AdminFeeOverride | null>(
      store.get("AdminFeeOverride", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get organizationId(): BigInt {
    let value = this.get("organizationId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set organizationId(value: BigInt) {
    this.set("organizationId", Value.fromBigInt(value));
  }

  get isEnabled(): boolean {
    let value = this.get("isEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isEnabled(value: boolean) {
    this.set("isEnabled", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Deposit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Deposit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Deposit", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Deposit | null {
    return changetype<Deposit | null>(
      store.get_in_block("Deposit", id.toHexString())
    );
  }

  static load(id: Bytes): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _sender(): Bytes {
    let value = this.get("_sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _sender(value: Bytes) {
    this.set("_sender", Value.fromBytes(value));
  }

  get accountId(): Bytes {
    let value = this.get("accountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set accountId(value: Bytes) {
    this.set("accountId", Value.fromBytes(value));
  }

  get assetKey_assetAddress(): Bytes {
    let value = this.get("assetKey_assetAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set assetKey_assetAddress(value: Bytes) {
    this.set("assetKey_assetAddress", Value.fromBytes(value));
  }

  get assetKey_id(): BigInt {
    let value = this.get("assetKey_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set assetKey_id(value: BigInt) {
    this.set("assetKey_id", Value.fromBigInt(value));
  }

  get assetKey_assetType(): i32 {
    let value = this.get("assetKey_assetType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set assetKey_assetType(value: i32) {
    this.set("assetKey_assetType", Value.fromI32(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DepositFeeUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositFeeUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DepositFeeUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DepositFeeUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DepositFeeUpdated | null {
    return changetype<DepositFeeUpdated | null>(
      store.get_in_block("DepositFeeUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): DepositFeeUpdated | null {
    return changetype<DepositFeeUpdated | null>(
      store.get("DepositFeeUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get organizationId(): BigInt {
    let value = this.get("organizationId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set organizationId(value: BigInt) {
    this.set("organizationId", Value.fromBigInt(value));
  }

  get feeConfig_isEnabled(): boolean {
    let value = this.get("feeConfig_isEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set feeConfig_isEnabled(value: boolean) {
    this.set("feeConfig_isEnabled", Value.fromBoolean(value));
  }

  get feeConfig_percentage(): i32 {
    let value = this.get("feeConfig_percentage");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set feeConfig_percentage(value: i32) {
    this.set("feeConfig_percentage", Value.fromI32(value));
  }

  get feeConfig_minFee(): BigInt {
    let value = this.get("feeConfig_minFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_minFee(value: BigInt) {
    this.set("feeConfig_minFee", Value.fromBigInt(value));
  }

  get feeConfig_maxFee(): BigInt {
    let value = this.get("feeConfig_maxFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_maxFee(value: BigInt) {
    this.set("feeConfig_maxFee", Value.fromBigInt(value));
  }

  get feeConfig_useFlatRate(): boolean {
    let value = this.get("feeConfig_useFlatRate");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set feeConfig_useFlatRate(value: boolean) {
    this.set("feeConfig_useFlatRate", Value.fromBoolean(value));
  }

  get feeConfig_flatRate(): BigInt {
    let value = this.get("feeConfig_flatRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_flatRate(value: BigInt) {
    this.set("feeConfig_flatRate", Value.fromBigInt(value));
  }

  get feeConfig_flatRateFeeAssetKey_assetAddress(): Bytes {
    let value = this.get("feeConfig_flatRateFeeAssetKey_assetAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set feeConfig_flatRateFeeAssetKey_assetAddress(value: Bytes) {
    this.set(
      "feeConfig_flatRateFeeAssetKey_assetAddress",
      Value.fromBytes(value)
    );
  }

  get feeConfig_flatRateFeeAssetKey_id(): BigInt {
    let value = this.get("feeConfig_flatRateFeeAssetKey_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_flatRateFeeAssetKey_id(value: BigInt) {
    this.set("feeConfig_flatRateFeeAssetKey_id", Value.fromBigInt(value));
  }

  get feeConfig_flatRateFeeAssetKey_assetType(): i32 {
    let value = this.get("feeConfig_flatRateFeeAssetKey_assetType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set feeConfig_flatRateFeeAssetKey_assetType(value: i32) {
    this.set("feeConfig_flatRateFeeAssetKey_assetType", Value.fromI32(value));
  }

  get feeConfig_withdrawAccount_organizationId(): BigInt {
    let value = this.get("feeConfig_withdrawAccount_organizationId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_withdrawAccount_organizationId(value: BigInt) {
    this.set(
      "feeConfig_withdrawAccount_organizationId",
      Value.fromBigInt(value)
    );
  }

  get feeConfig_withdrawAccount_relatedId(): BigInt {
    let value = this.get("feeConfig_withdrawAccount_relatedId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_withdrawAccount_relatedId(value: BigInt) {
    this.set("feeConfig_withdrawAccount_relatedId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OrderCanceled extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OrderCanceled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OrderCanceled must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OrderCanceled", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OrderCanceled | null {
    return changetype<OrderCanceled | null>(
      store.get_in_block("OrderCanceled", id.toHexString())
    );
  }

  static load(id: Bytes): OrderCanceled | null {
    return changetype<OrderCanceled | null>(
      store.get("OrderCanceled", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get orderId(): BigInt {
    let value = this.get("orderId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set orderId(value: BigInt) {
    this.set("orderId", Value.fromBigInt(value));
  }

  get accountId(): Bytes {
    let value = this.get("accountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set accountId(value: Bytes) {
    this.set("accountId", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OrderFeeUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OrderFeeUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OrderFeeUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OrderFeeUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OrderFeeUpdated | null {
    return changetype<OrderFeeUpdated | null>(
      store.get_in_block("OrderFeeUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): OrderFeeUpdated | null {
    return changetype<OrderFeeUpdated | null>(
      store.get("OrderFeeUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get organizationId(): BigInt {
    let value = this.get("organizationId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set organizationId(value: BigInt) {
    this.set("organizationId", Value.fromBigInt(value));
  }

  get feeConfig_isEnabled(): boolean {
    let value = this.get("feeConfig_isEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set feeConfig_isEnabled(value: boolean) {
    this.set("feeConfig_isEnabled", Value.fromBoolean(value));
  }

  get feeConfig_percentage(): i32 {
    let value = this.get("feeConfig_percentage");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set feeConfig_percentage(value: i32) {
    this.set("feeConfig_percentage", Value.fromI32(value));
  }

  get feeConfig_minFee(): BigInt {
    let value = this.get("feeConfig_minFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_minFee(value: BigInt) {
    this.set("feeConfig_minFee", Value.fromBigInt(value));
  }

  get feeConfig_maxFee(): BigInt {
    let value = this.get("feeConfig_maxFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_maxFee(value: BigInt) {
    this.set("feeConfig_maxFee", Value.fromBigInt(value));
  }

  get feeConfig_useFlatRate(): boolean {
    let value = this.get("feeConfig_useFlatRate");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set feeConfig_useFlatRate(value: boolean) {
    this.set("feeConfig_useFlatRate", Value.fromBoolean(value));
  }

  get feeConfig_flatRate(): BigInt {
    let value = this.get("feeConfig_flatRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_flatRate(value: BigInt) {
    this.set("feeConfig_flatRate", Value.fromBigInt(value));
  }

  get feeConfig_flatRateFeeAssetKey_assetAddress(): Bytes {
    let value = this.get("feeConfig_flatRateFeeAssetKey_assetAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set feeConfig_flatRateFeeAssetKey_assetAddress(value: Bytes) {
    this.set(
      "feeConfig_flatRateFeeAssetKey_assetAddress",
      Value.fromBytes(value)
    );
  }

  get feeConfig_flatRateFeeAssetKey_id(): BigInt {
    let value = this.get("feeConfig_flatRateFeeAssetKey_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_flatRateFeeAssetKey_id(value: BigInt) {
    this.set("feeConfig_flatRateFeeAssetKey_id", Value.fromBigInt(value));
  }

  get feeConfig_flatRateFeeAssetKey_assetType(): i32 {
    let value = this.get("feeConfig_flatRateFeeAssetKey_assetType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set feeConfig_flatRateFeeAssetKey_assetType(value: i32) {
    this.set("feeConfig_flatRateFeeAssetKey_assetType", Value.fromI32(value));
  }

  get feeConfig_withdrawAccount_organizationId(): BigInt {
    let value = this.get("feeConfig_withdrawAccount_organizationId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_withdrawAccount_organizationId(value: BigInt) {
    this.set(
      "feeConfig_withdrawAccount_organizationId",
      Value.fromBigInt(value)
    );
  }

  get feeConfig_withdrawAccount_relatedId(): BigInt {
    let value = this.get("feeConfig_withdrawAccount_relatedId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_withdrawAccount_relatedId(value: BigInt) {
    this.set("feeConfig_withdrawAccount_relatedId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OrderFilled extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OrderFilled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OrderFilled must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OrderFilled", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OrderFilled | null {
    return changetype<OrderFilled | null>(
      store.get_in_block("OrderFilled", id.toHexString())
    );
  }

  static load(id: Bytes): OrderFilled | null {
    return changetype<OrderFilled | null>(
      store.get("OrderFilled", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get orderId(): BigInt {
    let value = this.get("orderId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set orderId(value: BigInt) {
    this.set("orderId", Value.fromBigInt(value));
  }

  get accountId(): Bytes {
    let value = this.get("accountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set accountId(value: Bytes) {
    this.set("accountId", Value.fromBytes(value));
  }

  get orderFiller(): Bytes {
    let value = this.get("orderFiller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set orderFiller(value: Bytes) {
    this.set("orderFiller", Value.fromBytes(value));
  }

  get amountToSwap(): BigInt {
    let value = this.get("amountToSwap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountToSwap(value: BigInt) {
    this.set("amountToSwap", Value.fromBigInt(value));
  }

  get amountSwapped(): BigInt {
    let value = this.get("amountSwapped");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountSwapped(value: BigInt) {
    this.set("amountSwapped", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OrderPlaced extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OrderPlaced entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OrderPlaced must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OrderPlaced", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OrderPlaced | null {
    return changetype<OrderPlaced | null>(
      store.get_in_block("OrderPlaced", id.toHexString())
    );
  }

  static load(id: Bytes): OrderPlaced | null {
    return changetype<OrderPlaced | null>(
      store.get("OrderPlaced", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get orderId(): BigInt {
    let value = this.get("orderId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set orderId(value: BigInt) {
    this.set("orderId", Value.fromBigInt(value));
  }

  get accountId(): Bytes {
    let value = this.get("accountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set accountId(value: Bytes) {
    this.set("accountId", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OwnershipTransferred must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OwnershipTransferred", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get_in_block("OwnershipTransferred", id.toHexString())
    );
  }

  static load(id: Bytes): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateConfiguration extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateConfiguration entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateConfiguration must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateConfiguration", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateConfiguration | null {
    return changetype<UpdateConfiguration | null>(
      store.get_in_block("UpdateConfiguration", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateConfiguration | null {
    return changetype<UpdateConfiguration | null>(
      store.get("UpdateConfiguration", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _sender(): Bytes {
    let value = this.get("_sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _sender(value: Bytes) {
    this.set("_sender", Value.fromBytes(value));
  }

  get accountIdentityKey_organizationId(): BigInt {
    let value = this.get("accountIdentityKey_organizationId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accountIdentityKey_organizationId(value: BigInt) {
    this.set("accountIdentityKey_organizationId", Value.fromBigInt(value));
  }

  get accountIdentityKey_relatedId(): BigInt {
    let value = this.get("accountIdentityKey_relatedId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accountIdentityKey_relatedId(value: BigInt) {
    this.set("accountIdentityKey_relatedId", Value.fromBigInt(value));
  }

  get oldWithdrawAddress(): Bytes {
    let value = this.get("oldWithdrawAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set oldWithdrawAddress(value: Bytes) {
    this.set("oldWithdrawAddress", Value.fromBytes(value));
  }

  get newWithdrawAddress(): Bytes {
    let value = this.get("newWithdrawAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set newWithdrawAddress(value: Bytes) {
    this.set("newWithdrawAddress", Value.fromBytes(value));
  }

  get locktime(): BigInt {
    let value = this.get("locktime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set locktime(value: BigInt) {
    this.set("locktime", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Withdraw extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdraw entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Withdraw must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Withdraw", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Withdraw | null {
    return changetype<Withdraw | null>(
      store.get_in_block("Withdraw", id.toHexString())
    );
  }

  static load(id: Bytes): Withdraw | null {
    return changetype<Withdraw | null>(store.get("Withdraw", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _sender(): Bytes {
    let value = this.get("_sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _sender(value: Bytes) {
    this.set("_sender", Value.fromBytes(value));
  }

  get accountId(): Bytes {
    let value = this.get("accountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set accountId(value: Bytes) {
    this.set("accountId", Value.fromBytes(value));
  }

  get assetKey_assetAddress(): Bytes {
    let value = this.get("assetKey_assetAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set assetKey_assetAddress(value: Bytes) {
    this.set("assetKey_assetAddress", Value.fromBytes(value));
  }

  get assetKey_id(): BigInt {
    let value = this.get("assetKey_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set assetKey_id(value: BigInt) {
    this.set("assetKey_id", Value.fromBigInt(value));
  }

  get assetKey_assetType(): i32 {
    let value = this.get("assetKey_assetType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set assetKey_assetType(value: i32) {
    this.set("assetKey_assetType", Value.fromI32(value));
  }

  get withdrawAddress(): Bytes {
    let value = this.get("withdrawAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set withdrawAddress(value: Bytes) {
    this.set("withdrawAddress", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class WithdrawFeeUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WithdrawFeeUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type WithdrawFeeUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WithdrawFeeUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): WithdrawFeeUpdated | null {
    return changetype<WithdrawFeeUpdated | null>(
      store.get_in_block("WithdrawFeeUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): WithdrawFeeUpdated | null {
    return changetype<WithdrawFeeUpdated | null>(
      store.get("WithdrawFeeUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get organizationId(): BigInt {
    let value = this.get("organizationId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set organizationId(value: BigInt) {
    this.set("organizationId", Value.fromBigInt(value));
  }

  get feeConfig_isEnabled(): boolean {
    let value = this.get("feeConfig_isEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set feeConfig_isEnabled(value: boolean) {
    this.set("feeConfig_isEnabled", Value.fromBoolean(value));
  }

  get feeConfig_percentage(): i32 {
    let value = this.get("feeConfig_percentage");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set feeConfig_percentage(value: i32) {
    this.set("feeConfig_percentage", Value.fromI32(value));
  }

  get feeConfig_minFee(): BigInt {
    let value = this.get("feeConfig_minFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_minFee(value: BigInt) {
    this.set("feeConfig_minFee", Value.fromBigInt(value));
  }

  get feeConfig_maxFee(): BigInt {
    let value = this.get("feeConfig_maxFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_maxFee(value: BigInt) {
    this.set("feeConfig_maxFee", Value.fromBigInt(value));
  }

  get feeConfig_useFlatRate(): boolean {
    let value = this.get("feeConfig_useFlatRate");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set feeConfig_useFlatRate(value: boolean) {
    this.set("feeConfig_useFlatRate", Value.fromBoolean(value));
  }

  get feeConfig_flatRate(): BigInt {
    let value = this.get("feeConfig_flatRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_flatRate(value: BigInt) {
    this.set("feeConfig_flatRate", Value.fromBigInt(value));
  }

  get feeConfig_flatRateFeeAssetKey_assetAddress(): Bytes {
    let value = this.get("feeConfig_flatRateFeeAssetKey_assetAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set feeConfig_flatRateFeeAssetKey_assetAddress(value: Bytes) {
    this.set(
      "feeConfig_flatRateFeeAssetKey_assetAddress",
      Value.fromBytes(value)
    );
  }

  get feeConfig_flatRateFeeAssetKey_id(): BigInt {
    let value = this.get("feeConfig_flatRateFeeAssetKey_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_flatRateFeeAssetKey_id(value: BigInt) {
    this.set("feeConfig_flatRateFeeAssetKey_id", Value.fromBigInt(value));
  }

  get feeConfig_flatRateFeeAssetKey_assetType(): i32 {
    let value = this.get("feeConfig_flatRateFeeAssetKey_assetType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set feeConfig_flatRateFeeAssetKey_assetType(value: i32) {
    this.set("feeConfig_flatRateFeeAssetKey_assetType", Value.fromI32(value));
  }

  get feeConfig_withdrawAccount_organizationId(): BigInt {
    let value = this.get("feeConfig_withdrawAccount_organizationId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_withdrawAccount_organizationId(value: BigInt) {
    this.set(
      "feeConfig_withdrawAccount_organizationId",
      Value.fromBigInt(value)
    );
  }

  get feeConfig_withdrawAccount_relatedId(): BigInt {
    let value = this.get("feeConfig_withdrawAccount_relatedId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeConfig_withdrawAccount_relatedId(value: BigInt) {
    this.set("feeConfig_withdrawAccount_relatedId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
